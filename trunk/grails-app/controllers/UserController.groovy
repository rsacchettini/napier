/**
 * UserController.groovy 
 * Actions over AuthUser objects.
 * @author generated by plugin script
 * @auther Haotian Sun
 */           
class UserController {
	AuthenticateService authenticateService
	
  def index = { redirect(action:list,params:params) }

  // the delete, save and update actions only
  // accept POST requests
  def allowedMethods = [delete:'POST',
                        save:'POST',
                        update:'POST']

  def list = {
    //println "Enter list action in PersonController"
    if(!params.max)params.max = 10
      def list= AuthUser.findAll("from AuthUser as a")
    [ personList: list ]
  }

  def show = {
    [ person : AuthUser.get( params.id ) ]
  }

  /** person delete action, before removing an existing person, 
   *  he should be removed from those authorities which he is involved
   */
  def delete = {
    //println "Enter delete action in PersonController"
    def person = AuthUser.get( params.id )
    def authPrincipal = authenticateService.principal()
    if(person) {
      //avoid self-delete if the logged-in user is an admin
      if(!(authPrincipal instanceof String) && authPrincipal.username!=person.username){
         def au=Roles.findAll()
          //Roles.executeQuery("from Roles as i where i.people.id=?",person.id)
         /*if(au!=null){
          //firstly, delete this person from People_Authorities table.
          au.each{it.removeFromPeople(person)}
         }*/

           def list = Interested.findAll("from Interested as i where i.myBuyer.id=?",person.id)
            list.each{i->i.delete(flush:true)}
          def lista = Appointment.findAll("from Appointment as i where i.buyer.id=? or isManagedBy.id=?",person.id,person.id)
            lista.each{i->i.delete(flush:true)}
          def listp = Property.findAll("from Property as i where i.isSoldBy.id=?",person.id)
            listp.each{i->i.delete(flush:true)}

        person.delete(flush:true)
        flash.message = "AuthUser ${params.id} deleted."
        redirect(action:list)
      }else{
          flash.message = "You can not delete yourself,please login with another admin and try again"
          redirect(action:list)
      }
    }
    else {
      flash.message = "AuthUser not found with id ${params.id}"
      redirect(action:list)
    }
  }

  def edit = {
    def person = AuthUser.get( params.id )

    if(!person) {
      flash.message = "AuthUser not found with id ${params.id}"
      redirect(action:list)
    }
    else {
      def authorityList = Roles.list(params)
      return ['person': person,'authorityList':authorityList]
    }
  }
    
  /** person update action, added additional codes to update the user's roles*/
  def update = {
    //println "Entering update action in PersonController..."
    def person = AuthUser.get( params.id )
    def oldpw = person.passwd
    if(person) {
      person.properties = params
      def role = person.authorities
        if(role.authority == "ROLE_BUYER")
        {
            person.properties = params
        }
        else if(role.authority == "ROLE_SELLER")
        {
            person.properties = params
            person.address = params.address
            person.city= params.city
            person.postCode = params.postCode
        }
        person.userRealName = "${params.forename} ${params.surname}"
        if(person.save())
        {
                /*
                def au=Roles.findAll()
                au.each{it.removeFromPeople(person)}
                def roleauthority = (String)params.role
                def role = Roles.findByAuthority(roleauthority)
                */
                redirect(action:'list')
         }
        else
        {
            render(view:'edit',model:[person:person])
        }
      }
    else {
      flash.message = "AuthUser not found with id ${params.id}"
      redirect(action:edit,id:params.id)
    }
  }//update

  def create = {
    def person = new AuthUser()
    person.properties = params
    def authorityList= Roles.list(params)
    return ['person':person,'authorityList':authorityList]
  }

  /** person save action, added additional codes to save the user's roles*/
  def save = {
    //println "Enter SAVE action in PersonController..."
    def person
	def role = Roles.findByAuthority(params.role)
	if(role.authority == "ROLE_BUYER")
	{
		person = new Buyer()
		person.properties = params
	}
	else if(role.authority == "ROLE_SELLER")
	{
		person = new Seller()
		person.properties = params
		person.address = params.address
		person.city= params.city
		person.postCode = params.postCode
	}
	else if(role.authority == "ROLE_ESTATEAGENT")
	{
		person = new EstateAgent()
		person.properties = params
	}
	else
	{
		person = new AuthUser()
	}
	person.userRealName = "${person.forename} ${person.surname}"
	def pass = authenticateService.passwordEncoder(params.passwd)
    person.passwd=pass
   if(person.save()){
		  if(role.authority != null && role.authority.contains("ROLE")){
			 role.addToPeople(person)
		  println "Role "+role.authority +" has been added"
		}
      redirect(action:show,id:person.id)
    }
    else {
      def authorityList1= Roles.list(params)
      render(view:'create',model:[authorityList:authorityList1,person:person])
    }
  }//save

}