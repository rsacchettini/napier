/**
 * RegisterController.groovy 
 * Actions over AuthUser object.
 * @author generated by plugin script
 * @auther Haotian Sun
 */
class RegisterController {
  EmailerService emailerService
  AuthenticateService authenticateService
  
  /**
   * User Registration Top page
   */
  def index = {
    //if logon user.
    if(authenticateService.userDomain()!=null){
      log.info("${authenticateService.userDomain()} user hit the register page")
      redirect(action:"show")
	  return
    }
	/*
    def person = new AuthUser()
	person.properties = params
	//retrieving the list of role from the Roles class
	def authorityList= Roles.list(params)
    return ['person':person,'authorityList':authorityList]
    */
	//retrieving the list of role from the Roles class

	 redirect(action:"rolechoice")
  }
   /*Registration process :
   Step1 : Choosing the role
    */
	def rolechoice = {
		def authorityList= Roles.list(params)
	 return ['authorityList':authorityList]
}
	/* Step2 : saving the role chosen
	 */
	def roleSaveToCredentials = {
		def role = (String)params.role
		chain(action:displayCredentialsView,model:['role':role])
}

	//Step3 : displaying the right view regarding the role chosen
	def displayCredentialsView =
	{
		//retrieving the model from the previous action on step 2
		def role = chainModel['role']
		//adding the role to the person
		if(role == "ROLE_BUYER")
		{
			redirect(action:createBuyer)
		}
		else if(role == "ROLE_SELLER")
		{
		    redirect(action:createSeller)
		}

	}

	def createBuyer =
	{
		def person = new Buyer()
		 person.properties = params
		return['person':person,'role':"ROLE_BUYER"]
	}

	def createSeller =
	{
		def person = new Seller()
		 person.properties = params
	  return['person':person,'role':"ROLE_SELLER"]
	}


  def allowedMethods = [save: 'POST', update: 'POST']

  /**
   * User Information page for current user.
   */
  def show = {
    //get user id from session's domain class.
    def uinfo = authenticateService.userDomain()
    if(uinfo){
		// get the role of the person
		def person  = (AuthUser)AuthUser.get(uinfo.id)           
	  render(view:"show", model:[person:AuthUser.get(uinfo.id)])
    }else{
      redirect(action:"index")
    }
  }

  /**
   * edit page for current user
   */
  def edit = {
    def uinfo = authenticateService.userDomain()
    def person
    if(uinfo){
      person = AuthUser.get(uinfo.id)
    }else{
      redirect(action:"index")
    }
    if (!person) {
      flash.message="[Illegal Access] User not found with id ${params.id}"
      redirect(action:"index")
    } else {
		def authorityList= Roles.list(params)
   		return ['person':person,'authorityList':authorityList]
    }
  }

  /**
   * update action for current user's edit page
   */
  def update = {
	def properties = params
	def uinfo = authenticateService.userDomain()
    def person
    if(uinfo){
      person = AuthUser.get(uinfo.id)
    List role = person.authorities.collect{it}
	if(role[0].authority == "ROLE_BUYER")
	{
		person.properties = params
	}
	else if(role[0].authority == "ROLE_SELLER")
	{
		person.properties = params
		person.address = params.address
		person.city= params.city
		person.postCode = params.postCode
	}

	}else{
	  redirect(action:"index")
	}

    if (person){
      //if user want to change password. leave passwd field blank, passwd will not change.
      if(params.passwd && params.passwd.length()>0 && params.repasswd && params.repasswd.length()>0){
         if(params.passwd.equals(params.repasswd)){
           person.passwd = authenticateService.passwordEncoder(params.passwd)
         }else{
           person.passwd = ""
           flash.message = "The passwords you entered twice are not identical, please try again."
           render(view:"edit", model: [person: person])
         }
      }
      person.userRealName = "${person.forename} ${person.surname}"
      person.email=params.email
      if(params.email_show){
        person.email_show=true
      }else{
        person.email_show=false
      }

      if (person.save()) {
        redirect(action:"show", id: person.id)
      }else {
        render(view:"edit", model: [person: person])
      }
    }else {
      flash.message = "[Illegal Access] User not found with id ${params.id}"
      redirect(action:"index", id: params.id)
    }
  }

  /** person save action, added additional codes to save the user's roles*/
  def save = {
    if(authenticateService.userDomain()!=null){
      log.info("${authenticateService.userDomain()} user hit the register page")
      redirect(action:"show")
      return
    }
     def properties = params
     def person

	def role = Roles.findByAuthority(params.role)

	if(role.authority == "ROLE_BUYER")
	{
		person = new Buyer()
		person.properties = params
	}		
	else if(role.authority == "ROLE_SELLER")
	{
		person = new Seller()
		person.properties = params
		person.address = params.address
		person.city= params.city
		person.postCode = params.postCode
	}
	person.userRealName = "${person.forename} ${person.surname}"
	def cnf = authenticateService.getAcegiConfig()
    //def defaultRole = cnf.acegi.defaultRole
    def useMail = cnf.acegi.useMail
    /*def role = Roles.findByAuthority("ROLE_" + ((String)defaultRole).toUpperCase())
    if(!role){
      person.passwd = ""
      flash.message = "Default Role not found."
      render(view:"index", model: [person: person])
      return 
    }
    */

	if (params.captcha.toUpperCase() == session.captcha) {
      if (params.passwd.equals(params.repasswd) ) {
        def pass = authenticateService.passwordEncoder(params.passwd)
		person.passwd = pass
        person.enabled = true
        person.email_show = true
        person.description=""

		 //role.addToPeople(person)
		  //taking the role selected and adding it to the person

		if(person.save()){
		  if(role.authority != null && role.authority.contains("ROLE")){
			 role.addToPeople(person)
		  println "Role "+role.authority +" has been added"
		}


		  // send email if(useMail)
          if(useMail){
         String emailContent = """You have signed up for an account at:

 ${request.getScheme()}://${request.getServerName()}:${request.getServerPort()}${request.getContextPath()}

 Here are the details of your account:
 -------------------------------------
 LoginName: ${person.username}
 Email: ${person.email}
 Full Name: ${person.userRealName}
 Password: ${params.passwd}
"""

            def email = [
              to: [person.email], // "to" expects a List, NOT a single email address
              subject: "[${request.getContextPath()}] Account Signed Up",
              text: emailContent // "text" is the email body
            ]
            emailerService.sendEmails([email])
          }

          person.save(flush:true)
          //def redirectionString = (String)"${grailsAttributes.getApplicationUri(request)}/login/../j_acegi_security_check?j_username=${person.username}&j_password=${params.passwd}"
		    //def paramsMap =['j_username':person.username,'j_password':params.passwd]
			//using a string in the uri param of redirect closure because of a problem in the action name ../j_acegi
			//the slash is encoded in the url and it must not be
			def redirectionString = (String)"/login/../j_acegi_security_check?j_username=${person.username}&j_password=${params.passwd}"

			redirect(uri:((String)redirectionString))
		}else {
          person.passwd = ""
          //render(view: "index", model: [person: person])
		  //def authorityList1= Roles.list(params)//list containing the roles
		  //render(view:'index',model:[authorityList:authorityList1,person:person])
			render(view:"create${role.authority.substring(5)?.toLowerCase()}",model:[role:role.authority,person:person])

		}
      }else {
        person.passwd = ""
        flash.message = "The passwords you entered twice are not identical, please try again."
        //render(view: "index", model: [person: person])
		 // def authorityList1= Roles.list(params)//list containing the roles
		 render(view:"create${role.authority.substring(5)?.toLowerCase()}",model:[role:role.authority,person:person])
	  }
    }else {
      person.passwd = ""
      flash.message = "Access code did not match."
      //render(view: "index", model: [person: person])
	  // def authorityList1= Roles.list(params)//list containing the roles
		render(view:"create${role.authority.substring(5)?.toLowerCase()}",model:[role:role.authority,person:person])
	}
   } //save
}